[{"categories":["测试"],"contents":"欢迎阅读这篇文章 这是一篇测试文章，用来检查在 Hugo 主题中是否能正确显示目录。\n1. 引言 本篇文章将展示如何为 Hugo 网站配置目录，并验证是否能正确显示在页面上。\n1.1 什么是 Hugo？ Hugo 是一个快速的静态站点生成器。它通过使用简单的 Markdown 文件来生成网站内容。Hugo 的速度非常快，适合用来构建各种类型的静态网站。\n1.2 主题目录 在 Hugo 中，主题通常会提供用于显示目录的功能。目录是一个自动生成的导航工具，能帮助用户快速跳转到文章的不同部分。\n2. 配置 Hugo 主题 2.1 安装主题 首先，你需要安装一个支持目录功能的 Hugo 主题。在 Hugo 的官方文档中有很多可用的主题，选择一个适合你的需求的主题并安装。\ngit submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke ","date":"2024-12-16T00:00:00Z","desc":"本篇文章将展示如何为 Hugo 网站配置目录，并验证是否能正确显示在页面上。","permalink":"https://20403305.github.io/posts/demo/","section":null,"tags":["Hugo","目录","Markdown"],"title":"测试文章：Hugo 目录显示"},{"categories":["Tutorial"],"contents":"这是文章的详细内容，会在点击“阅读全文”后显示。\n在 GitHub Actions 中配置 Hugo 的步骤如下：\n设置 GitHub Actions 工作流文件：你需要创建一个 GitHub Actions 工作流文件，通常位于 .github/workflows/ 目录下，名为 deploy.yml 或类似的名称。 安装和配置 Hugo：你可以使用 peaceiris/actions-hugo GitHub Action 来自动安装和配置 Hugo。 下面是一个完整的工作流配置示例，演示了如何在 GitHub Actions 中设置和配置 Hugo，并自动将 Hugo 网站部署到 GitHub Pages。\n步骤 1：创建工作流文件 在你的 Hugo 项目中，创建 .github/workflows 目录（如果还没有的话）。 在 .github/workflows 目录下创建一个名为 deploy.yml 的工作流文件。 mkdir -p .github/workflows touch .github/workflows/deploy.yml 步骤 2：编辑工作流文件 在 deploy.yml 中，配置如下内容：\nname: Deploy Hugo site to GitHub Pages on: push: branches: - main # 当推送到 main（或你使用的默认分支）时触发构建 workflow_dispatch: # 允许手动触发工作流 permissions: contents: read # 读取仓库内容 pages: write # 写入 GitHub Pages id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # 允许同时运行多个工作流实例，但不取消进行中的任务 jobs: build: runs-on: ubuntu-latest # 使用 Ubuntu 最新版本的环境 steps: # 检出仓库代码 - name: Checkout code uses: actions/checkout@v4 # 设置 Hugo - name: Set up Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.128.0\u0026#39; # 指定 Hugo 的版本，可以根据需要调整 # 构建 Hugo 网站 - name: Build the Hugo site run: hugo --minify # 生成静态文件并进行压缩 # 上传构建的静态文件到 GitHub Pages - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Hugo 构建结果会在 public 目录下 deploy: runs-on: ubuntu-latest needs: build # 依赖于 build 作业，确保先构建后部署 steps: # 部署到 GitHub Pages - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 with: branch: gh-pages # 将构建的文件推送到 `gh-pages` 分支 folder: ./public # Hugo 输出的静态文件目录 解释工作流文件 触发条件 (on)：\npush: 当推送到 main（或你选择的默认分支）时，触发构建和部署流程。 workflow_dispatch: 允许手动触发此工作流。 权限配置 (permissions)：\ncontents: read: 允许读取仓库内容。 pages: write: 允许将构建内容推送到 GitHub Pages。 id-token: write: 用于获取 GitHub Pages 的访问权限。 并发配置 (concurrency)：\n这个配置确保不会有多个构建并行执行，而是等当前部署完成后再执行下一个部署。 作业 build：\nactions/checkout@v4: 检出 GitHub 仓库代码。 peaceiris/actions-hugo@v2: 设置 Hugo，安装指定版本的 Hugo（如 0.128.0）。 hugo --minify: 执行 Hugo 命令生成静态网站，并将文件输出到 public/ 目录。 actions/upload-pages-artifact@v3: 上传 public/ 目录中的构建文件，以便后续部署。 作业 deploy：\n使用 actions/deploy-pages@v4 将 public/ 目录中的文件部署到 gh-pages 分支，供 GitHub Pages 提供服务。 步骤 3：配置 GitHub Pages 确保你已经配置了 GitHub Pages：\n进入你的 GitHub 仓库。 在仓库的 Settings \u0026gt; Pages 部分，选择 gh-pages 分支作为源。 步骤 4：推送工作流文件并验证 提交并推送 .github/workflows/deploy.yml 文件到你的仓库。 git add .github/workflows/deploy.yml git commit -m \u0026#34;Add GitHub Actions workflow for Hugo site\u0026#34; git push origin main 每当你向 main 分支推送更新时，GitHub Actions 会自动构建 Hugo 网站并将其部署到 gh-pages 分支。 你可以通过访问 https://\u0026lt;your-username\u0026gt;.github.io/\u0026lt;your-repository\u0026gt; 来查看部署的 Hugo 网站。 步骤 5：查看构建日志和部署状态 在 GitHub 仓库中，点击 Actions 标签页查看工作流的执行情况。 如果一切顺利，网站将自动部署到 GitHub Pages。 总结 通过 GitHub Actions 自动化 Hugo 网站的部署步骤：\n创建 .github/workflows/deploy.yml 工作流文件。 配置 Hugo 安装、构建并上传静态文件。 配置部署到 gh-pages 分支。 提交并推送到 GitHub 仓库，GitHub Actions 会自动构建并部署 Hugo 网站。 通过这种方式，你就能轻松地自动化 Hugo 网站的构建和发布过程，无需手动干预。\n其他问题 在哪个分支下创建deploy.yml。我的主分支是master，还有一个gh-pages\n在 GitHub Actions 中创建工作流文件 (deploy.yml) 的位置应当是 主分支，也就是你的 master 分支（或你项目中的默认分支）。通常，GitHub Actions 文件放在主分支下，因为它是管理仓库和启动自动化任务的核心分支。\n具体步骤： 工作流文件的位置：\n工作流文件应该放在仓库的 master 分支下，路径是 .github/workflows/deploy.yml。这个文件将会在 master 分支发生更改时被触发。 工作流触发的分支：\n在 deploy.yml 文件中，你会配置触发器 on.push.branches 来指定工作流在哪个分支上触发。例如，下面的配置会在 master 分支发生 push 时触发工作流： on: push: branches: - master # 触发条件：当推送到 master 分支时触发 部署到 gh-pages 分支：\n即使工作流文件在 master 分支下，部署时可以将静态站点部署到 gh-pages 分支。你不需要把 deploy.yml 放在 gh-pages 分支，因为 GitHub Actions 会根据你在 deploy.yml 中的配置将文件推送到 gh-pages 分支。 最终文件结构 假设你的仓库有以下文件结构：\n. ├── .github │ └── workflows │ └── deploy.yml # 这个文件应该放在 master 分支下 ├── content ├── themes ├── static ├── config.toml ├── public/ # 这是 Hugo 构建的输出文件目录，GitHub Pages 会从这里部署网站 完整的 deploy.yml 示例 name: Deploy Hugo site to GitHub Pages on: push: branches: - master # 触发工作流的分支是 master workflow_dispatch: # 允许手动触发工作流 permissions: contents: read # 读取仓库内容 pages: write # 写入 GitHub Pages id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # 允许多个任务并行运行，但不取消当前进行中的任务 jobs: build: runs-on: ubuntu-latest # 使用 Ubuntu 最新版本的环境 steps: # 检出仓库代码 - name: Checkout code uses: actions/checkout@v4 # 设置 Hugo 环境 - name: Set up Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.128.0\u0026#39; # 你可以根据需要更改 Hugo 版本 # 构建 Hugo 网站 - name: Build the Hugo site run: hugo --minify # 生成静态文件并进行最小化处理 # 上传构建的静态文件到 GitHub Pages - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Hugo 构建的文件会被输出到 `public` 目录 deploy: runs-on: ubuntu-latest needs: build # 依赖于 build 作业，确保先构建后部署 steps: # 将构建的静态文件部署到 GitHub Pages - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 with: branch: gh-pages # 将构建的文件推送到 `gh-pages` 分支 folder: ./public # Hugo 输出的静态文件目录 部署流程 提交 deploy.yml 到 master 分支： 将 deploy.yml 文件提交并推送到你的 master 分支。\ngit add .github/workflows/deploy.yml git commit -m \u0026#34;Add GitHub Actions workflow for Hugo\u0026#34; git push origin master GitHub Actions 执行：\n当你向 master 分支推送更改时，GitHub Actions 将会自动触发构建和部署流程。 构建完成后，静态文件将被推送到 gh-pages 分支，并通过 GitHub Pages 提供服务。 访问 GitHub Pages 部署完成后，访问你的 GitHub Pages 网站： https://\u0026lt;你的 GitHub 用户名\u0026gt;.github.io/\u0026lt;仓库名\u0026gt;/ 比如，如果用户名是 johnDoe，仓库名是 myHugoBlog，你可以访问： https://johnDoe.github.io/myHugoBlog/ 总结 将 deploy.yml 文件放在 master 分支 下的 .github/workflows/ 目录中。 配置 GitHub Actions 触发条件为 push 到 master 分支。 使用 Hugo 进行网站构建，将构建结果推送到 gh-pages 分支作为 GitHub Pages 的源。 ","date":"2024-12-13T19:04:36+08:00","desc":null,"permalink":"https://20403305.github.io/posts/my-fifth-post/","section":null,"tags":null,"title":"如何在github action中配置hugo"},{"categories":["hugo"],"contents":"从错误日志\nModule \u0026#34;ananke\u0026#34; is not compatible with this Hugo version: Min 0.128.0; run \u0026#34;hugo mod graph\u0026#34; for more information. 问题原因 Ananke 主题要求使用 Hugo 版本至少为 0.128.0，而你当前使用的 Hugo 版本是 v0.123.7，因此会发生兼容性问题。\n此外，错误的根本原因也包括以下几点：\nerror calling partial: \u0026#34;/root/myblog/themes/ananke/layouts/partials/site-style.html:1:8\u0026#34;: execute of template failed: template: partials/site-style.html:1:8: executing \u0026#34;partials/site-style.html\u0026#34; at \u0026lt;partialCached \u0026#34;func/style/GetMainCSS\u0026#34; \u0026#34;style/GetMainCSS\u0026#34;\u0026gt;: error calling partialCached: \u0026#34;/root/myblog/themes/ananke/layouts/partials/func/style/GetMainCSS.html:71:23\u0026#34;: execute of template failed: template: partials/func/style/GetMainCSS.html:71:23: executing \u0026#34;partials/func/style/GetMainCSS.html\u0026#34; at \u0026lt;css\u0026gt;: can\u0026#39;t evaluate field Sass in type interface {} 这个错误表明，主题的模板代码在处理样式时出错，尤其是在尝试加载或应用 Sass 样式时。\n解决方法 升级 Hugo 到兼容版本\n最直接的解决方法是将 Hugo 升级到 v0.128.0 或更高版本。可以通过以下命令来升级 Hugo：\nsudo apt-get update sudo apt-get install hugo 或者，如果你希望安装特定版本的 Hugo，可以使用 Hugo 的官方发布页面 下载并安装最新版本。\n使用与当前 Hugo 版本兼容的主题\n如果你不希望升级 Hugo，另一个选择是使用与 v0.123.7 版本兼容的 Hugo 主题。你可以尝试更换主题，或者寻找兼容旧版 Hugo 的主题。\n一些兼容老版本 Hugo 的主题可以在 Hugo 官方主题库 中找到。\n手动修改主题模板（不推荐）\n如果你有能力，可以尝试修改 Ananke 主题的模板，使其兼容当前 Hugo 版本。这通常涉及到修改主题的 layouts/partials/ 目录下的样式文件，特别是与 Sass 相关的部分。这个方法比较复杂且容易出错，不建议初学者使用。\n检查 Sass 配置\n如果你希望继续使用当前的 Hugo 版本，并且想保留 Ananke 主题，可以尝试通过以下方式禁用或修复 Sass 配置：\n在 config.toml 文件中禁用 Sass 配置，或将其修改为一个兼容的配置。检查主题文档，了解如何处理或禁用 Sass。 [params] disableSass = true 或者如果你想继续使用 Sass，可以尝试安装和配置 Sass 工具链，使其能正确编译主题中的 Sass 文件。\n总结 最简单的解决方案是将 Hugo 升级到 v0.128.0 或更高版本，以确保 Ananke 主题兼容。 如果不想升级 Hugo，可以选择使用一个兼容旧版本 Hugo 的主题。 如果你对模板修改有经验，也可以尝试调整 Ananke 主题中的代码，但这是一个较为复杂的方案。 看起来你在 Ubuntu 系统上安装的 Hugo 版本仍然是 v0.123.7，并且通过 apt-get 安装的 Hugo 版本已经是最新的，但它依然不符合你所需要的版本（0.128.0 或更高版本）。\n解决方法：手动升级 Hugo 版本 Ubuntu 的 apt 包管理器提供的 Hugo 版本可能会比较老，因此你需要手动升级到 Hugo 的最新版本。你可以按照以下步骤来安装 Hugo 的最新版本。\n步骤 1：卸载当前版本的 Hugo 首先，卸载系统中当前安装的 Hugo 版本：\nsudo apt-get remove hugo 步骤 2：下载最新的 Hugo 版本 接下来，从 Hugo 的 GitHub 发布页面 下载最新的 Hugo 版本。你可以通过以下命令来下载：\n访问 Hugo Releases 页面，找到最新的版本（v0.128.0 或更高版本）。 下载对应你系统的 Hugo 二进制文件（例如，hugo_extended_0.128.0_linux-amd64.tar.gz）。 或者，你可以使用以下命令下载最新版本的 Hugo：\n# 下载 Hugo v0.128.0 的 Linux 版本 wget https://github.com/gohugoio/hugo/releases/download/v0.128.0/hugo_extended_0.128.0_linux-amd64.tar.gz 步骤 3：解压并安装 Hugo 解压下载的压缩包，并将 hugo 二进制文件移到 /usr/local/bin 目录下，使其全局可用：\ntar -xvzf hugo_extended_0.128.0_linux-amd64.tar.gz sudo mv hugo /usr/local/bin/ 步骤 4：验证安装 安装完成后，验证是否成功安装了最新版本的 Hugo：\nhugo version 你应该看到类似如下的输出，表明你已经安装了 Hugo v0.128.0 或更高版本：\nhugo v0.128.0+extended linux/amd64 BuildDate=2024-12-14T01:07:23Z VendorInfo=ubuntu:0.128.0-1ubuntu0.2 步骤 5：重启 Hugo 服务 完成升级后，你可以重新启动 Hugo 开发服务器：\nhugo server 现在，Ananke 主题应该可以正常运行，并且与你的 Hugo 版本兼容。\n总结 卸载旧版本的 Hugo，并通过手动下载和安装的方式安装最新版本。 下载和解压最新的 Hugo 二进制文件。 验证安装，确保使用的是兼容 Ananke 主题的 Hugo 版本。 通过这种方式，你应该能够解决兼容性问题，并成功运行 Hugo 网站。\n","date":"2024-12-13T18:57:39+08:00","desc":"升级 Hugo","permalink":"https://20403305.github.io/posts/my-fourth-post/","section":null,"tags":null,"title":"主题和hugo兼容问题 || 手动升级 Hugo 版本"},{"categories":["Tutorial"],"contents":"在Ubuntu Linux上使用Hugo搭建个人博客网站的步骤如下：\n1. 安装Hugo 通过Snap安装（推荐） Snap是Ubuntu默认的软件包管理工具之一，可以方便地安装Hugo。\n打开终端，执行以下命令：\nsudo snap install hugo 通过APT安装 如果你更喜欢使用APT包管理工具，可以通过以下命令安装Hugo：\nsudo apt update sudo apt install hugo 2. 创建一个新的Hugo网站 安装完成后，使用以下命令来创建一个新的Hugo项目：\nhugo new site my-blog my-blog是你博客项目的目录名称，你可以根据自己的需要修改。执行完该命令后，会创建一个名为my-blog的文件夹，其中包含了Hugo网站的基本结构。\n3. 选择一个主题 Hugo有许多免费的主题，你可以从Hugo主题官网上查找。假设我们选择一个常见的主题ananke，你可以按照以下步骤进行操作：\n进入你的博客项目文件夹：\ncd my-blog 下载并将主题添加到网站的themes目录：\ngit init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 配置config.toml(或hugo.toml-0.128版本)以使用该主题：\n编辑config.toml(或hugo.toml)文件，指定主题：\nnano config.toml 在文件中添加或修改以下行：\ntheme = \u0026#34;ananke\u0026#34; 保存并退出编辑器（在nano中按CTRL+X，然后按Y确认保存，最后按Enter退出）。\n4. 创建和编辑内容 在Hugo中，内容通常存放在content文件夹下。你可以创建博客文章、页面等。比如，要创建一篇新的博客文章，使用以下命令：\nhugo new posts/my-first-post.md 这将在content/posts/目录下创建一个名为my-first-post.md的Markdown文件。你可以用文本编辑器打开并编辑它：\nnano content/posts/my-first-post.md 在文件中填写你的博客文章内容，例如：\n--- title: \u0026#34;我的第一篇博客文章\u0026#34; date: 2024-12-13 draft: true --- 这是我的第一篇博客文章！ 注意：draft: true表示这篇文章是草稿，未发布。如果想让它发布，修改为draft: false。\n5. 本地预览网站 在开始构建和预览博客之前，可以使用以下命令启动一个本地开发服务器，查看网站效果：\nhugo server 然后，打开浏览器，访问http://localhost:1313，你就能看到你的网站。\n6. 构建静态网站 当你准备好将博客发布到服务器时，使用以下命令来构建静态文件：\nhugo 此命令会生成一个public目录，里面包含了所有生成的HTML、CSS和JS文件。你可以将public目录的内容上传到你的Web服务器上，或者使用像GitHub Pages、Netlify、Vercel等服务进行托管。\n7. 部署到GitHub Pages（可选） 假设你想将你的博客部署到GitHub Pages，以下是部署的基本步骤：\n在GitHub上创建一个新的空仓库，比如my-blog。\n将你的博客目录初始化为Git仓库并提交：\ngit init git add . git commit -m \u0026#34;Initial commit\u0026#34; 将远程仓库添加到Git配置中：\ngit remote add origin https://github.com/your-username/my-blog.git 配置Hugo生成的public目录作为Git的发布分支：\ngit subtree push --prefix=public origin gh-pages 这会将生成的public文件推送到GitHub的gh-pages分支，从而使GitHub Pages自动部署。\n在GitHub仓库设置中，启用GitHub Pages，选择gh-pages分支作为发布源。\n8. 其他问题 git subtree push --prefix=public origin gh-pages 是一个用于将 Git 仓库的子目录内容推送到远程仓库特定分支的命令。\n解释 git subtree：Git 提供的一个子命令，允许你将一个子目录（即某个文件夹的内容）推送到一个单独的分支，或者从一个分支中提取该子目录的内容。\npush：表示将内容推送到远程仓库。\n--prefix=public：指定要推送的本地子目录是 public。这里 public 是你本地仓库中某个子目录的路径，通常用于存放生成的静态文件（例如，Hugo 构建网站后的输出文件）。\norigin：远程仓库的名字，通常默认是 origin，表示你本地仓库关联的远程仓库。\ngh-pages：这是你要推送到的目标分支。gh-pages 是 GitHub Pages 使用的特殊分支，用于托管静态网站。当你将内容推送到 gh-pages 分支时，GitHub 会自动将该分支的内容发布为一个网站。\n整体作用 git subtree push --prefix=public origin gh-pages 的作用是将 public 目录中的内容推送到远程仓库的 gh-pages 分支。这个命令通常用于静态网站的部署过程，比如使用 Hugo 生成的网站，在 public 目录下存放的是生成的静态文件。然后，你可以将这些静态文件推送到 GitHub 的 gh-pages 分支，供 GitHub Pages 服务进行托管。\n典型使用场景 假设你有一个 Git 仓库，用来管理你的博客或其他项目，且该项目使用 Hugo 或其他静态网站生成器生成网站内容。生成的静态文件会存放在 public 目录下。你希望将这些文件推送到 GitHub 上的 gh-pages 分支，使其成为你的网站。\n命令执行过程 生成静态文件：你通常会在本地运行一个命令（如 hugo）来生成静态网站内容，生成的文件会被放在 public 目录下。\n推送到 gh-pages：使用 git subtree push --prefix=public origin gh-pages 将 public 目录中的内容推送到 GitHub 上的 gh-pages 分支。\n例子 假设你的项目结构如下：\nmy-project/ ├── content/ ├── static/ ├── themes/ ├── public/ \u0026lt;-- 生成的静态文件目录 └── config.toml 当你执行 hugo 命令时，Hugo 会在 public/ 目录下生成静态网站的文件。然后你执行以下命令将 public/ 目录的内容推送到 GitHub Pages：\ngit subtree push --prefix=public origin gh-pages 这时，public 目录中的所有文件（例如 index.html 和其他静态文件）都会被推送到 GitHub 上的 gh-pages 分支，并且 GitHub Pages 会自动使用这个分支来托管你的静态网站。\n总结 git subtree push --prefix=public origin gh-pages 是一个将本地仓库中 public 目录下的文件推送到 GitHub 仓库的 gh-pages 分支的命令。这在将静态网站部署到 GitHub Pages 时非常有用。\n","date":"2024-12-13T18:52:28+08:00","desc":"安装Hugo","permalink":"https://20403305.github.io/posts/my-third-post/","section":null,"tags":null,"title":"ubuntu liunx 如何用Hugo来搭建个人博客网站"},{"categories":["Tutorial"],"contents":"我的第一篇博客 欢迎来到我的博客网站！这是我使用 Hugo 搭建的个人博客。\nHugo 是一个非常快速的静态网站生成器，它使用 Markdown 格式写作，支持丰富的功能和主题，非常适合用来创建个人博客。\n关于 Hugo Hugo 是一个快速且灵活的静态网站生成器。它非常适合用来构建个人博客、公司网站、项目展示等各种网站。\n","date":"2024-12-13T12:00:00+08:00","desc":null,"permalink":"https://20403305.github.io/posts/my-second-post/","section":null,"tags":["hugo","tutorial","blog"],"title":"我的第二篇博客"},{"categories":null,"contents":"未完待遇。。。\n","date":"2024-12-13T00:00:00Z","desc":null,"permalink":"https://20403305.github.io/about/","section":null,"tags":null,"title":"关于我"},{"categories":["Tutorial"],"contents":"这是一篇示例文章，欢迎来到我的博客！\n","date":"2024-12-13T00:00:00Z","desc":"This is a short summary of the article.","permalink":"https://20403305.github.io/posts/my-first-post/","section":"Technology","tags":["hugo","tutorial","blog"],"title":"我的第一篇博客文章"},{"categories":null,"contents":"你可以通过以下方式联系我：\n邮箱: 754287250@qq.com ","date":"2024-12-13T00:00:00Z","desc":null,"permalink":"https://20403305.github.io/contact/","section":null,"tags":null,"title":"联系我"},{"categories":null,"contents":"这是一篇测试文章的内容。\n","date":"2024-03-14T00:00:00Z","desc":null,"permalink":"https://20403305.github.io/posts/test/","section":null,"tags":["测试"],"title":"测试文章"}]